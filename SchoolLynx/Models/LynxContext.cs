// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SchoolLynxLibrary.Models;

namespace SchoolLynx.Models;

public partial class LynxContext : DbContext
{
    public LynxContext()
    {
    }

    public LynxContext(DbContextOptions<LynxContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Classgroup> Classgroups { get; set; }

    public virtual DbSet<Confirmation> Confirmations { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Person> Persons { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=localhost;Database=schoollynx;Username=postgres;Password=postgres;Persist Security Info=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Classgroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("classgroups_pkey");

            entity.ToTable("classgroups");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.Groupname)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("groupname");
        });

        modelBuilder.Entity<Confirmation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("confirmations_pk");

            entity.ToTable("confirmations");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.ConfirmedOn)
                .HasDefaultValueSql("now()")
                .HasColumnName("confirmed_on");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.PersonId).HasColumnName("person_id");

            entity.HasOne(d => d.Message).WithMany(p => p.Confirmations)
                .HasForeignKey(d => d.MessageId)
                .HasConstraintName("confirmations_fk");

            entity.HasOne(d => d.Person).WithMany(p => p.Confirmations)
                .HasForeignKey(d => d.PersonId)
                .HasConstraintName("confirmations_fk_1");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("messages_pk");

            entity.ToTable("messages");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.ClassgroupId).HasColumnName("classgroup_id");
            entity.Property(e => e.SenderId).HasColumnName("sender_id");
            entity.Property(e => e.SentOn)
                .HasDefaultValueSql("now()")
                .HasColumnName("sent_on");
            entity.Property(e => e.Text)
                .IsRequired()
                .HasColumnName("text");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasColumnName("title");

            entity.HasOne(d => d.Classgroup).WithMany(p => p.Messages)
                .HasForeignKey(d => d.ClassgroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_classgroups");

            entity.HasOne(d => d.Sender).WithMany(p => p.Messages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_parents_sender");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("parents_pk");

            entity.ToTable("persons");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasColumnName("id");
            entity.Property(e => e.ClassgroupId).HasColumnName("classgroup_id");
            entity.Property(e => e.Firstname)
                .HasMaxLength(20)
                .HasColumnName("firstname");
            entity.Property(e => e.Isteacher).HasColumnName("isteacher");
            entity.Property(e => e.Lastname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("lastname");

            entity.HasOne(d => d.Classgroup).WithMany(p => p.People)
                .HasForeignKey(d => d.ClassgroupId)
                .HasConstraintName("fk_classgroups");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}